{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7sJVkeWgbrnt"
      },
      "source": [
        "# Data preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ahLFQgoM3JCf",
        "outputId": "f028ebc5-5b27-4736-f218-e7374f7bf5d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "Created 41490 sentence pairs from original data.\n",
            "({'sentence': '那下次见吧。'}, {'sentence': '那下次见面吧。'}) ({'sentence': '虽然我不能去但是他们都去。'}, {'sentence': '虽然我不能去但是别人他们都去。'}) ({'sentence': '他们都有很好的一天。'}, {'sentence': '他们都有很好的天。'})\n"
          ]
        }
      ],
      "source": [
        "import json\n",
        "\n",
        "# Mount Google Drive to access data\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "file_path = '/content/drive/MyDrive/Colab Notebooks/data_cged/training_data.jsonl'\n",
        "\n",
        "# Load the data and create pairs directly\n",
        "def load_data_and_create_pairs(file_path):\n",
        "    sentence_pairs = []\n",
        "\n",
        "    with open(file_path, 'r', encoding='utf-8') as f:\n",
        "        for line in f:\n",
        "            item = json.loads(line.strip())\n",
        "            # Check if both correct and error fields are present and not empty\n",
        "            if item.get(\"correct\") and item.get(\"error\"):\n",
        "                correct_item = {\"sentence\": item[\"correct\"]}\n",
        "                ungrammatical_item = {\"sentence\": item[\"text\"]}\n",
        "                sentence_pairs.append((correct_item, ungrammatical_item))\n",
        "\n",
        "    return sentence_pairs\n",
        "\n",
        "sentence_pairs = load_data_and_create_pairs(file_path)\n",
        "\n",
        "print(f\"Created {len(sentence_pairs)} sentence pairs from original data.\")\n",
        "print(sentence_pairs[1], sentence_pairs[5], sentence_pairs[10])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 80-10-10 split\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_pairs, temp_pairs = train_test_split(sentence_pairs, test_size=0.2, random_state=42)\n",
        "val_pairs, test_pairs = train_test_split(temp_pairs, test_size=0.5, random_state=42)\n",
        "\n",
        "print(f\"Number of pairs in training set: {len(train_pairs)}\")\n",
        "print(f\"Number of pairs in validation set: {len(val_pairs)}\")\n",
        "print(f\"Number of pairs in test set: {len(test_pairs)}\")\n",
        "\n",
        "# Inspect a few pairs from each set\n",
        "print(\"\\nExamples from training set:\")\n",
        "print(train_pairs[:2])\n",
        "\n",
        "print(\"\\nExamples from validation set:\")\n",
        "print(val_pairs[:2])\n",
        "\n",
        "print(\"\\nExamples from test set:\")\n",
        "print(test_pairs[:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4EPulGFCmhiG",
        "outputId": "2f1469bc-3072-4d18-ada3-91c7f4ee83e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of pairs in training set: 33192\n",
            "Number of pairs in validation set: 4149\n",
            "Number of pairs in test set: 4149\n",
            "\n",
            "Examples from training set:\n",
            "[({'sentence': '吸烟包括吸烟者自己对吸烟者旁边的人有影响，比如说：癌症、记忆力衰弱等等。'}, {'sentence': '吸烟包括吸烟者自己对吸烟者旁边的人起影响，比如说：发癌症、记忆力衰弱等等。'}), ({'sentence': '包括我家、大城市里的一般的家庭开冰箱满是吃的东西。看马路的垃圾堆，有很多吃不下的东西。'}, {'sentence': '包括我家、大城市里的一般的家庭开冰箱满着吃的东西。看马路的拉圾所，有很多吃不下的东西。'})]\n",
            "\n",
            "Examples from validation set:\n",
            "[({'sentence': '请你帮我买一个电脑。'}, {'sentence': '请你对我买一个电脑。'}), ({'sentence': '他毕业于上海交通大学，今年二十三岁。他以前是记者，现在没有工作。'}, {'sentence': '他已经毕业于上海交通大学，他今年二十三岁。他以前是记者，现在是没有工作。'})]\n",
            "\n",
            "Examples from test set:\n",
            "[({'sentence': '可是我有一件重要的事情，不能参加了。对不起。让你难过了。'}, {'sentence': '可是我有一个重要的事情，不能参加。对不起。让你难过。'}), ({'sentence': '“安乐死”是一种生命的选择，现在对很多病人来说可能“生”比“死”还要苦：不能吃东西，总是吃药，不能去外面，一直在病房，有的病人不会说话。如果自己的亲朋好友是这个样子的话，我绝对受不了；可能钱的负担也不小；但是这不仅是钱的问题而且是心理上的问题。'}, {'sentence': '“安乐死”是一种生命的选择，现在很多病人可能“生”比“死”还要苦：不能吃东西，总是吃药，不能出去外面，一直在病房，有的病人不会说话。如果自己的亲朋好友就是这个样子的话，我绝对受不了；可能钱的负担也不少；但是这不仅是钱的问题是心理上的问题而且。'})]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Group pairs by new length bins based on the correct sentence length (0-9, ..., 100-109, 110+)\n",
        "new_length_bins = list(range(0, 111, 10)) + [float('inf')]\n",
        "new_length_labels = [f'{new_length_bins[i]}-{new_length_bins[i+1]-1}' for i in range(len(new_length_bins)-2)] + [f'{new_length_bins[-2]}+']\n",
        "\n",
        "from collections import defaultdict\n",
        "new_grouped_pairs = defaultdict(list)\n",
        "\n",
        "for correct_item, ungrammatical_item in test_pairs:\n",
        "    correct_len = len(correct_item[\"sentence\"])\n",
        "\n",
        "    # Find the correct bin for the correct sentence length\n",
        "    assigned_bin = None\n",
        "    for j in range(len(new_length_bins) - 1):\n",
        "        if new_length_bins[j] <= correct_len < new_length_bins[j+1]:\n",
        "            assigned_bin = new_length_labels[j]\n",
        "            break\n",
        "    # Handle the case for the last bin (>= 110)\n",
        "    if assigned_bin is None and correct_len >= new_length_bins[-2]:\n",
        "         if len(new_length_labels) > 0:\n",
        "             assigned_bin = new_length_labels[-1]\n",
        "\n",
        "\n",
        "    if assigned_bin:\n",
        "        # Append the original pair to the correct length bin\n",
        "        new_grouped_pairs[assigned_bin].append((correct_item, ungrammatical_item))\n",
        "\n",
        "# Print the number of pairs in each new length bin\n",
        "print(\"\\nNumber of pairs in each new length bin (based on correct sentence length):\")\n",
        "# Sort by label\n",
        "def sort_key(label):\n",
        "    if '-' in label:\n",
        "        try:\n",
        "            return int(label.split('-')[0])\n",
        "        except ValueError:\n",
        "            pass\n",
        "    elif '+' in label:\n",
        "         try:\n",
        "             return int(label.split('+')[0])\n",
        "         except ValueError:\n",
        "              pass\n",
        "    return label\n",
        "\n",
        "for label, pairs in sorted(new_grouped_pairs.items(), key=lambda item: sort_key(item[0])):\n",
        "    print(f\"Length bin '{label}': {len(pairs)} pairs\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FydFFbnJm6Uq",
        "outputId": "4929bd88-5c9d-4d7e-83f4-14972638086c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Number of pairs in each new length bin (based on correct sentence length):\n",
            "Length bin '0-9': 308 pairs\n",
            "Length bin '10-19': 1091 pairs\n",
            "Length bin '20-29': 657 pairs\n",
            "Length bin '30-39': 560 pairs\n",
            "Length bin '40-49': 481 pairs\n",
            "Length bin '50-59': 341 pairs\n",
            "Length bin '60-69': 248 pairs\n",
            "Length bin '70-79': 176 pairs\n",
            "Length bin '80-89': 114 pairs\n",
            "Length bin '90-99': 59 pairs\n",
            "Length bin '100-109': 42 pairs\n",
            "Length bin '110+': 72 pairs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jnedDVp-PvQS"
      },
      "source": [
        "# Implementing the Dataset class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BeX6ROFKAv9o"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "\n",
        "class GrammarCheckDataset(Dataset):\n",
        "    # Modified to accept a list of sentence pairs and return tokenized pairs with labels\n",
        "    def __init__(self, data_pairs, tokenizer, max_length=256):\n",
        "        self.data_pairs = data_pairs # This will be a list of (correct_item, ungrammatical_item) tuples\n",
        "        self.tokenizer = tokenizer\n",
        "        self.max_length = max_length\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data_pairs)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        correct_item, ungrammatical_item = self.data_pairs[idx]\n",
        "\n",
        "        correct_sentence = correct_item[\"sentence\"]\n",
        "        ungrammatical_sentence = ungrammatical_item[\"sentence\"]\n",
        "\n",
        "        # Tokenize the correct sentence\n",
        "        tokenized_correct = self.tokenizer(correct_sentence,\n",
        "                                          padding='max_length',\n",
        "                                          truncation=True,\n",
        "                                          max_length=self.max_length,\n",
        "                                          return_tensors='pt')\n",
        "\n",
        "        # Tokenize the ungrammatical sentence\n",
        "        tokenized_ungrammatical = self.tokenizer(ungrammatical_sentence,\n",
        "                                               padding='max_length',\n",
        "                                               truncation=True,\n",
        "                                               max_length=self.max_length,\n",
        "                                               return_tensors='pt')\n",
        "\n",
        "        # Return a dictionary containing tokenized correct and ungrammatical sentences and their labels\n",
        "        return {\n",
        "            \"correct_input_ids\": tokenized_correct['input_ids'].squeeze(0),\n",
        "            \"correct_attention_mask\": tokenized_correct['attention_mask'].squeeze(0),\n",
        "            \"ungrammatical_input_ids\": tokenized_ungrammatical['input_ids'].squeeze(0),\n",
        "            \"ungrammatical_attention_mask\": tokenized_ungrammatical['attention_mask'].squeeze(0),\n",
        "        }"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UBydZRfHnaJL"
      },
      "source": [
        "# Loading the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2uaaTQSQVMxq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91b5c563-8d6b-4378-861a-7d1e96a2af4a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using cuda device\n"
          ]
        }
      ],
      "source": [
        "# Check whether a GPU is available\n",
        "device = \"cpu\"\n",
        "if torch.cuda.is_available():\n",
        "    device = \"cuda\"\n",
        "print(f\"Using {device} device\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tK7YxE2WBH7i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b1d2e9e7-bf9a-41a9-8265-bde231e61fb7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.54.0)\n",
            "Collecting transformers\n",
            "  Downloading transformers-4.54.1-py3-none-any.whl.metadata (41 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.7/41.7 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.34.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.34.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.21.2)\n",
            "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (2025.3.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.1)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.7.14)\n",
            "Downloading transformers-4.54.1-py3-none-any.whl (11.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.2/11.2 MB\u001b[0m \u001b[31m119.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: transformers\n",
            "  Attempting uninstall: transformers\n",
            "    Found existing installation: transformers 4.54.0\n",
            "    Uninstalling transformers-4.54.0:\n",
            "      Successfully uninstalled transformers-4.54.0\n",
            "Successfully installed transformers-4.54.1\n"
          ]
        }
      ],
      "source": [
        "!pip install --upgrade transformers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7h04A6D_ZpGK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369,
          "referenced_widgets": [
            "3e8b4bfe8ed64597b39e22ec6def5462",
            "773f89a11f30414ea84d9c8de4320ec8",
            "4729dd630dfb4615b33408e599db534f",
            "d01944ad66e94d77be7f142520c9f066",
            "45b7348790264064a0ef928da9091be7",
            "c42c68e2046f431c955012a43adbee09",
            "ee102135f8024a388404ccb2f7e1f1ca",
            "6bcb2433c02b42bf8e65cf5a8e8034c1",
            "4ca1db2faf594072ab68ba3d19f0f7e6",
            "83f23a9d54f643e4a0d8061a4991639c",
            "d91ad60ec26541048232dcf9ffa5e9b9",
            "f56488dd7a9d4c9cb72fe5ebaf745775",
            "22735806bfa94b6f9b6aba1700baab01",
            "240425adb187488fb00b9a2acd9a0713",
            "4cc187a07002480eb2a994fa7233fb14",
            "2a8aefe9373f4bec9dc4f9989974f7bd",
            "c05deddc1e5b414d90e1ab5924b508c7",
            "0bb650431ade40e893d180cef76f119b",
            "9565825c34434ae88e313ad7a11ddc71",
            "12562de061b24c32ad03600a9032b7f0",
            "b0a47ce656194a8a9662b3f3596bacd2",
            "1f4a0ed14b6a469298ad308e845acd91",
            "a70e544627d24cf1adc857c2a3fd2a57",
            "379c296b63cc4b8e89eddf1e6d5a2259",
            "03a187707c974f199835a3a7146f53c3",
            "e65988e82386499d9a527a8ce48ae0b4",
            "bf92b7d742184e859b9417faa5c1fff4",
            "913d4939e24f4b539a991a0b95398c8d",
            "4d246fb2b8494fc8a7116bee454e4560",
            "c62cccf199834304b3d5493793f7e3a5",
            "5ce3473b0cf043abb261ea62e43a1357",
            "7b1d84b0ac3f40c4bb1df52dafa7c5b7",
            "f0e002de6dd1468b9b14c09b1f333acf",
            "ed25af74ce5643e2b87bdd4eecb66c16",
            "edcdcdf9db634aaf86609acb396e3af2",
            "af8fb9cd7cee4fc2a0393916094a2d93",
            "57c6828ea126404e9417b0a8e1e92831",
            "d5963df66fb341788ee00a467603b81d",
            "92f4b960144f40729adc3dc4f02370ad",
            "c7c3189be3f64810a93d0f3d8e07dd18",
            "0f89f451419d44848f59442a02baa96c",
            "62a28ea815f94543a3fbba3f40d03949",
            "cb986e5f804a437787ac78092793d39f",
            "2f673120605d4b458ef7fa0dd339ddcf",
            "dfe787bf81f44dbf881f3099c240732c",
            "263763abf30a48a68926899e5c39c837",
            "2cd7c8448a32456db116ae0097d06545",
            "ac5339279c7240979b55c6d29669ce8a",
            "f367ecd8d3654da1ada51a46d77dec26",
            "7e4cbfa9b4154a29ae9701650a323f94",
            "16839e866420487a8488319a71157d14",
            "5103ccd3fb1845d0b486df8c141faf68",
            "d2aee177ef5f480db6c8e634344de9e4",
            "6a55dfaa2e4d40458453bb99d8ca91f8",
            "bf90d304e78648f7aaeacd031eb3b78a",
            "2633f146ed504bb881cf84c74d40b02c",
            "dcd168e2f55a47b7b381a57047eb2809",
            "1418914873604d5b80835d8183c3d3e7",
            "e918505888de4b4eae36ec3444dda8d1",
            "8ce0b8aead6147e4a94af90c48a931cc",
            "03982d82d5c947c7a3fd672a985da428",
            "5ffed56025484cc59bdd3c4c0fec299f",
            "80177250fd924704a7d8be5ebb825095",
            "a104f011807d4f6081fa50faea5b2889",
            "dfc446a14fb84fe8a53155dc1abd1a64",
            "da687f1d67b04b87b5b039e8338ea444",
            "99adfee976ab486e86f747c469ed8bd6",
            "34fd7d8dc1e14cbb892f982afc750f1a",
            "eb23c401f94d40469766cc20a5afa650",
            "7cd718a30462420a8cca3b190233888a",
            "9dbfd8424a264545a359a3a28928f5d4",
            "fd904d6dd907459998673d950ae99cf5",
            "fb56f67c27f64a3dbc3087f9ec3fdd27",
            "ab5dfab23cb34822beaf1430eeb8cc25",
            "4ddd62b3ab0944a58f3863150cc7d53a",
            "838dea66b175415a85823b51333fe7c8",
            "5e11ac0d467f4da1b67576c5642b1e76"
          ]
        },
        "outputId": "034e38e6-e60c-40bc-a6ed-8af3bdd84392"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3e8b4bfe8ed64597b39e22ec6def5462"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f56488dd7a9d4c9cb72fe5ebaf745775"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a70e544627d24cf1adc857c2a3fd2a57"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/11.4M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ed25af74ce5643e2b87bdd4eecb66c16"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/726 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "dfe787bf81f44dbf881f3099c240732c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/1.50G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "2633f146ed504bb881cf84c74d40b02c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "99adfee976ab486e86f747c469ed8bd6"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "from transformers import AutoTokenizer, AutoModelForCausalLM\n",
        "\n",
        "model_name = \"Qwen/Qwen3-0.6B\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "model = AutoModelForCausalLM.from_pretrained(model_name)\n",
        "\n",
        "model = model.to(device)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Training the model"
      ],
      "metadata": {
        "id": "RzT4aV7OmG9e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataloader"
      ],
      "metadata": {
        "id": "6SdXF7GxovP8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 8 # Ensure batch size is even for paired data\n",
        "if batch_size % 2 != 0:\n",
        "    print(f\"Warning: Batch size {batch_size} is odd. Adjusting to {batch_size - 1} for paired data.\")\n",
        "    batch_size = batch_size - 1\n",
        "elif batch_size == 0:\n",
        "     print(f\"Warning: Batch size cannot be 0. Adjusting to 2 for paired data.\")\n",
        "     batch_size = 2\n",
        "\n",
        "\n",
        "# Create the datasets using the original pairs\n",
        "train_dataset = GrammarCheckDataset(train_pairs, tokenizer)\n",
        "validation_dataset = GrammarCheckDataset(val_pairs, tokenizer) # Use val_pairs directly\n",
        "test_dataset = GrammarCheckDataset(test_pairs, tokenizer) # Use test_pairs directly\n",
        "\n",
        "train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "validation_dataloader = DataLoader(validation_dataset, batch_size=batch_size)\n",
        "test_dataloader = DataLoader(test_dataset, batch_size=batch_size)\n",
        "\n",
        "# Inspect one batch\n",
        "print(\"Inspecting one batch from train_dataloader:\")\n",
        "for batch in train_dataloader:\n",
        "    print(\"Correct input_ids shape:\", batch[\"correct_input_ids\"].shape)\n",
        "    print(\"Correct attention_mask shape:\", batch[\"correct_attention_mask\"].shape)\n",
        "    print(\"Ungrammatical input_ids shape:\", batch[\"ungrammatical_input_ids\"].shape)\n",
        "    print(\"Ungrammatical attention_mask shape:\", batch[\"ungrammatical_attention_mask\"].shape)\n",
        "    break"
      ],
      "metadata": {
        "id": "MPfgJjIEjT7r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6aba2e91-2cf0-4502-d873-e4fd995df3bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inspecting one batch from train_dataloader:\n",
            "Correct input_ids shape: torch.Size([8, 256])\n",
            "Correct attention_mask shape: torch.Size([8, 256])\n",
            "Ungrammatical input_ids shape: torch.Size([8, 256])\n",
            "Ungrammatical attention_mask shape: torch.Size([8, 256])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Margin Loss"
      ],
      "metadata": {
        "id": "zbhkQu6ygVNF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class MarginLoss(nn.Module):\n",
        "    def __init__(self, margin=1.0):\n",
        "        super().__init__()\n",
        "        self.margin = margin\n",
        "\n",
        "    def forward(self, correct_logits, correct_attention_mask, correct_input_ids,\n",
        "                ungrammatical_logits, ungrammatical_attention_mask, ungrammatical_input_ids):\n",
        "\n",
        "        # Calculate log probability for correct sentences\n",
        "        shifted_correct_logits = correct_logits[:, :-1, :].contiguous()\n",
        "        correct_target_ids = correct_input_ids[:, 1:]\n",
        "        correct_target_mask = correct_attention_mask[:, 1:]\n",
        "        log_probs_correct_all = torch.log_softmax(shifted_correct_logits, dim=-1)\n",
        "        one_hot_correct_target_ids = F.one_hot(correct_target_ids, num_classes=log_probs_correct_all.size(-1)).float()\n",
        "        selected_log_probs_correct = torch.einsum('bsv,bsv->bs', log_probs_correct_all, one_hot_correct_target_ids)\n",
        "        masked_log_probs_correct = selected_log_probs_correct * correct_target_mask.float()\n",
        "        # Sum log probabilities over the sequence length for each sentence\n",
        "        sentence_log_probs_correct = masked_log_probs_correct.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "        # Calculate log probability for ungrammatical sentences\n",
        "        shifted_ungrammatical_logits = ungrammatical_logits[:, :-1, :].contiguous()\n",
        "        ungrammatical_target_ids = ungrammatical_input_ids[:, 1:]\n",
        "        ungrammatical_target_mask = ungrammatical_attention_mask[:, 1:]\n",
        "        log_probs_ungrammatical_all = torch.log_softmax(shifted_ungrammatical_logits, dim=-1)\n",
        "        one_hot_ungrammatical_target_ids = F.one_hot(ungrammatical_target_ids, num_classes=log_probs_ungrammatical_all.size(-1)).float()\n",
        "        selected_log_probs_ungrammatical = torch.einsum('bsv,bsv->bs', log_probs_ungrammatical_all, one_hot_ungrammatical_target_ids)\n",
        "        masked_log_probs_ungrammatical = selected_log_probs_ungrammatical * ungrammatical_target_mask.float()\n",
        "        # Sum log probabilities over the sequence length for each sentence\n",
        "        sentence_log_probs_ungrammatical = masked_log_probs_ungrammatical.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "        # Calculate the margin loss\n",
        "        # The loss is max(0, margin - (log_prob_correct - log_prob_ungrammatical))\n",
        "        loss = torch.relu(self.margin - (sentence_log_probs_correct - sentence_log_probs_ungrammatical))\n",
        "\n",
        "        # Calculate the mean loss over the batch\n",
        "        batch_loss = torch.mean(loss)\n",
        "\n",
        "        return batch_loss"
      ],
      "metadata": {
        "id": "nQ854s3Kfh_v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model fine-tuning"
      ],
      "metadata": {
        "id": "v54ZH8aqAR5m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### LoRA"
      ],
      "metadata": {
        "id": "WnGKTU4ZAmA5"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "02c9e887",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b8fbc500-ea96-4c00-a657-ca2f5e1a72fc"
      },
      "source": [
        "from peft import LoraConfig, get_peft_model\n",
        "import torch\n",
        "\n",
        "# Define LoRA configuration\n",
        "lora_config = LoraConfig(\n",
        "    r=8,\n",
        "    lora_alpha=16,\n",
        "    target_modules=[\"q_proj\", \"v_proj\"],\n",
        "    lora_dropout=0.1,\n",
        "    bias=\"none\",\n",
        "    task_type=\"CAUSAL_LM\",\n",
        ")\n",
        "\n",
        "# Get PEFT model\n",
        "model = get_peft_model(model, lora_config)\n",
        "model.print_trainable_parameters()\n",
        "\n",
        "# Initialize the optimizer\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=1e-5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "trainable params: 1,146,880 || all params: 597,196,800 || trainable%: 0.1920\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training function"
      ],
      "metadata": {
        "id": "q5gRxnlrAr6f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tqdm\n",
        "import copy\n",
        "import matplotlib.pyplot as plt # Import matplotlib\n",
        "\n",
        "def train(model, optimizer, train_dataloader, validation_dataloader, criterion, epochs=10, patience=3):\n",
        "\n",
        "    # Track and save the model with the best validation loss\n",
        "    best_val_loss = float('inf')\n",
        "    epochs_no_improve = 0\n",
        "    best_model_state = None\n",
        "\n",
        "    # Lists to store metrics for plotting\n",
        "    history = {\n",
        "        'train_loss': [],\n",
        "        'val_loss': [],\n",
        "        'val_accuracy': []\n",
        "    }\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        # Training phase\n",
        "        model.train()\n",
        "        epoch_train_losses = []\n",
        "\n",
        "        # Iterate through all training batches\n",
        "        for batch in tqdm.tqdm(train_dataloader, desc=f\"Epoch {epoch+1}/{epochs}\"):\n",
        "            # Move batch components to the device\n",
        "            correct_input_ids = batch[\"correct_input_ids\"].to(device)\n",
        "            correct_attention_mask = batch[\"correct_attention_mask\"].to(device)\n",
        "            ungrammatical_input_ids = batch[\"ungrammatical_input_ids\"].to(device)\n",
        "            ungrammatical_attention_mask = batch[\"ungrammatical_attention_mask\"].to(device)\n",
        "\n",
        "            # Reset the optimiser\n",
        "            optimizer.zero_grad()\n",
        "\n",
        "            # Forward pass for correct sentences\n",
        "            outputs_correct = model(input_ids=correct_input_ids, attention_mask=correct_attention_mask)\n",
        "            correct_logits = outputs_correct.logits # (batch_size, sequence_length, vocab_size)\n",
        "\n",
        "            # Forward pass for ungrammatical sentences\n",
        "            outputs_ungrammatical = model(input_ids=ungrammatical_input_ids, attention_mask=ungrammatical_attention_mask)\n",
        "            ungrammatical_logits = outputs_ungrammatical.logits # (batch_size, sequence_length, vocab_size)\n",
        "\n",
        "\n",
        "            # Calculate the MarginLoss\n",
        "            # Pass separate logits, attention_masks, and input_ids for correct and ungrammatical sentences\n",
        "            loss = criterion(correct_logits, correct_attention_mask, correct_input_ids,\n",
        "                             ungrammatical_logits, ungrammatical_attention_mask, ungrammatical_input_ids)\n",
        "\n",
        "\n",
        "            # Backward pass\n",
        "            loss.backward()\n",
        "\n",
        "            optimizer.step()\n",
        "\n",
        "            epoch_train_losses.append(loss.item())\n",
        "\n",
        "            # Print every 100 batches\n",
        "            if len(epoch_train_losses) % 100 == 0:\n",
        "                current_avg_train_loss = sum(epoch_train_losses)/len(epoch_train_losses) if len(epoch_train_losses) > 0 else 0\n",
        "                print(f\"\\nEpoch: {epoch + 1}, Batch: {len(epoch_train_losses)}, current train loss: {current_avg_train_loss:.4f}\")\n",
        "\n",
        "\n",
        "        # Print the loss at the end of every epoch\n",
        "        # Calculate the final average train loss for the epoch\n",
        "        final_avg_train_loss = sum(epoch_train_losses)/len(epoch_train_losses) if len(epoch_train_losses) > 0 else 0\n",
        "        print(f\"\\nEpoch: {epoch + 1}, processed {len(epoch_train_losses)} batches, final average train loss: {final_avg_train_loss:.4f}\")\n",
        "        history['train_loss'].append(final_avg_train_loss) # Store train loss\n",
        "\n",
        "\n",
        "        # Validation phase\n",
        "        model.eval()\n",
        "        epoch_val_losses = []\n",
        "        correct_predictions = 0\n",
        "        total_pairs_evaluated = 0 # Count pairs for accuracy calculation\n",
        "\n",
        "        # Disable gradient calculation for validation\n",
        "        with torch.no_grad():\n",
        "            for batch in tqdm.tqdm(validation_dataloader, desc=f\"Epoch {epoch+1}/{epochs} (Validation)\"):\n",
        "                # Move batch components to the device\n",
        "                correct_input_ids = batch[\"correct_input_ids\"].to(device)\n",
        "                correct_attention_mask = batch[\"correct_attention_mask\"].to(device)\n",
        "                ungrammatical_input_ids = batch[\"ungrammatical_input_ids\"].to(device)\n",
        "                ungrammatical_attention_mask = batch[\"ungrammatical_attention_mask\"].to(device)\n",
        "\n",
        "\n",
        "                # Forward pass for correct sentences\n",
        "                outputs_correct = model(input_ids=correct_input_ids, attention_mask=correct_attention_mask)\n",
        "                correct_logits = outputs_correct.logits\n",
        "\n",
        "                # Forward pass for ungrammatical sentences\n",
        "                outputs_ungrammatical = model(input_ids=ungrammatical_input_ids, attention_mask=ungrammatical_attention_mask)\n",
        "                ungrammatical_logits = outputs_ungrammatical.logits\n",
        "\n",
        "\n",
        "                # Calculate validation loss using the custom criterion\n",
        "                val_loss = criterion(correct_logits, correct_attention_mask, correct_input_ids,\n",
        "                                      ungrammatical_logits, ungrammatical_attention_mask, ungrammatical_input_ids)\n",
        "                epoch_val_losses.append(val_loss.item())\n",
        "\n",
        "                # Calculate Accuracy\n",
        "                # Recalculate sentence log probabilities based on the logits\n",
        "\n",
        "                # For correct sentences\n",
        "                shifted_correct_logits = correct_logits[:, :-1, :].contiguous()\n",
        "                correct_target_ids = correct_input_ids[:, 1:]\n",
        "                correct_target_mask = correct_attention_mask[:, 1:]\n",
        "                log_probs_correct_all = torch.log_softmax(shifted_correct_logits, dim=-1)\n",
        "                one_hot_correct_target_ids = F.one_hot(correct_target_ids, num_classes=log_probs_correct_all.size(-1)).float()\n",
        "                selected_log_probs_correct = torch.einsum('bsv,bsv->bs', log_probs_correct_all, one_hot_correct_target_ids)\n",
        "                masked_log_probs_correct = selected_log_probs_correct * correct_target_mask.float()\n",
        "                sentence_log_probs_correct = masked_log_probs_correct.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "\n",
        "                # For ungrammatical sentences\n",
        "                shifted_ungrammatical_logits = ungrammatical_logits[:, :-1, :].contiguous()\n",
        "                ungrammatical_target_ids = ungrammatical_input_ids[:, 1:]\n",
        "                ungrammatical_target_mask = ungrammatical_attention_mask[:, 1:]\n",
        "                log_probs_ungrammatical_all = torch.log_softmax(shifted_ungrammatical_logits, dim=-1)\n",
        "                one_hot_ungrammatical_target_ids = F.one_hot(ungrammatical_target_ids, num_classes=log_probs_ungrammatical_all.size(-1)).float()\n",
        "                selected_log_probs_ungrammatical = torch.einsum('bsv,bsv->bs', log_probs_ungrammatical_all, one_hot_ungrammatical_target_ids)\n",
        "                masked_log_probs_ungrammatical = selected_log_probs_ungrammatical * ungrammatical_target_mask.float()\n",
        "                sentence_log_probs_ungrammatical = masked_log_probs_ungrammatical.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "\n",
        "                # Compare log probabilities within each pair\n",
        "                for i in range(sentence_log_probs_correct.shape[0]):\n",
        "                    if sentence_log_probs_correct[i] > sentence_log_probs_ungrammatical[i]:\n",
        "                        correct_predictions += 1\n",
        "                    total_pairs_evaluated += 1 # Count each pair\n",
        "\n",
        "            avg_val_loss = sum(epoch_val_losses)/len(epoch_val_losses) if len(epoch_val_losses) > 0 else 0\n",
        "            val_accuracy = (correct_predictions / total_pairs_evaluated) * 100 if total_pairs_evaluated > 0 else 0\n",
        "\n",
        "            print(f\"\\nEpoch: {epoch+1}, average validation loss: {avg_val_loss:.4f}, validation accuracy: {val_accuracy:.2f}%\")\n",
        "            history['val_loss'].append(avg_val_loss) # Store val loss\n",
        "            history['val_accuracy'].append(val_accuracy) # Store val accuracy\n",
        "\n",
        "\n",
        "        # Early Stopping Check\n",
        "        # Use the average validation loss for early stopping\n",
        "        if avg_val_loss < best_val_loss:\n",
        "            best_val_loss = avg_val_loss\n",
        "            epochs_no_improve = 0\n",
        "            # Save the model state dictionary when validation loss improves\n",
        "            # Move each tensor within the state dictionary to CPU\n",
        "            best_model_state = {k: v.cpu() for k, v in copy.deepcopy(model.state_dict()).items()}\n",
        "            print(f\"Validation loss improved. Saving model state.\")\n",
        "        else:\n",
        "            epochs_no_improve += 1\n",
        "            print(f\"Validation loss did not improve. Epochs with no improvement: {epochs_no_improve}/{patience}\")\n",
        "\n",
        "        if epochs_no_improve >= patience:\n",
        "            print(f\"Early stopping triggered after {epoch+1} epochs. Validation loss did not improve for {patience} consecutive epochs.\")\n",
        "            break\n",
        "\n",
        "        # End of Epoch\n",
        "        model.train()\n",
        "\n",
        "    print(\"Training finished.\")\n",
        "\n",
        "    # Load the best model state after training\n",
        "    if best_model_state is not None:\n",
        "        model.load_state_dict(best_model_state)\n",
        "        print(\"Loaded model state with the best validation loss.\")\n",
        "    else:\n",
        "        print(\"No model state was saved (perhaps training did not complete at least one epoch).\")\n",
        "\n",
        "    return model, history # Return the best model and training history"
      ],
      "metadata": {
        "id": "Rvt_5BcrnPd1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "best_model, history = train(\n",
        "    model,\n",
        "    optimizer,\n",
        "    train_dataloader,\n",
        "    validation_dataloader,\n",
        "    criterion=MarginLoss(),\n",
        "    epochs=10,\n",
        "    patience=3\n",
        ")\n",
        "\n",
        "print(\"Training completed.\")"
      ],
      "metadata": {
        "id": "B0maj22iM-jb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "89383eb3-c618-4dd8-d500-7af41c375729"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:   2%|▏         | 100/4149 [01:23<55:21,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 100, current train loss: 0.8092\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:   5%|▍         | 200/4149 [02:45<53:56,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 200, current train loss: 0.9380\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:   7%|▋         | 300/4149 [04:07<52:37,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 300, current train loss: 0.9488\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  10%|▉         | 400/4149 [05:29<51:16,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 400, current train loss: 0.9657\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  12%|█▏        | 500/4149 [06:51<49:56,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 500, current train loss: 0.9774\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  14%|█▍        | 600/4149 [08:13<48:32,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 600, current train loss: 0.9882\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  17%|█▋        | 700/4149 [09:35<47:08,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 700, current train loss: 0.9766\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  19%|█▉        | 800/4149 [10:57<45:44,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 800, current train loss: 0.9726\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  22%|██▏       | 900/4149 [12:19<45:20,  1.19it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 900, current train loss: 0.9585\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  24%|██▍       | 1000/4149 [13:41<43:04,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1000, current train loss: 0.9506\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  27%|██▋       | 1100/4149 [15:04<41:41,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1100, current train loss: 0.9612\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  29%|██▉       | 1200/4149 [16:26<40:18,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1200, current train loss: 0.9528\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  31%|███▏      | 1300/4149 [17:48<38:56,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1300, current train loss: 0.9506\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  34%|███▎      | 1400/4149 [19:10<37:33,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1400, current train loss: 0.9420\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  36%|███▌      | 1500/4149 [20:32<36:13,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1500, current train loss: 0.9407\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  39%|███▊      | 1600/4149 [21:54<34:52,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1600, current train loss: 0.9319\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  41%|████      | 1700/4149 [23:16<33:28,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1700, current train loss: 0.9408\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  43%|████▎     | 1800/4149 [24:38<32:07,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1800, current train loss: 0.9304\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  46%|████▌     | 1900/4149 [26:00<30:44,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 1900, current train loss: 0.9293\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  48%|████▊     | 2000/4149 [27:22<29:22,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2000, current train loss: 0.9286\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  51%|█████     | 2100/4149 [28:44<28:01,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2100, current train loss: 0.9253\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  53%|█████▎    | 2200/4149 [30:06<26:37,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2200, current train loss: 0.9158\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  55%|█████▌    | 2300/4149 [31:28<25:16,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2300, current train loss: 0.9168\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  58%|█████▊    | 2400/4149 [32:50<23:54,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2400, current train loss: 0.9103\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  60%|██████    | 2500/4149 [34:12<22:32,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2500, current train loss: 0.9023\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  63%|██████▎   | 2600/4149 [35:34<21:10,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2600, current train loss: 0.8965\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  65%|██████▌   | 2700/4149 [36:56<19:48,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2700, current train loss: 0.8892\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  67%|██████▋   | 2800/4149 [38:18<18:25,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2800, current train loss: 0.8868\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  70%|██████▉   | 2900/4149 [39:40<17:04,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 2900, current train loss: 0.8832\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  72%|███████▏  | 3000/4149 [41:02<15:42,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3000, current train loss: 0.8781\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  75%|███████▍  | 3100/4149 [42:24<14:21,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3100, current train loss: 0.8798\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  77%|███████▋  | 3200/4149 [43:46<12:58,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3200, current train loss: 0.8762\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  80%|███████▉  | 3300/4149 [45:08<11:36,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3300, current train loss: 0.8740\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  82%|████████▏ | 3400/4149 [46:30<10:14,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3400, current train loss: 0.8666\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  84%|████████▍ | 3500/4149 [47:53<08:52,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3500, current train loss: 0.8624\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  87%|████████▋ | 3600/4149 [49:15<07:30,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3600, current train loss: 0.8563\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  89%|████████▉ | 3700/4149 [50:37<06:08,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3700, current train loss: 0.8505\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  92%|█████████▏| 3800/4149 [51:59<04:46,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3800, current train loss: 0.8463\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  94%|█████████▍| 3900/4149 [53:21<03:24,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 3900, current train loss: 0.8428\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  96%|█████████▋| 4000/4149 [54:43<02:02,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 4000, current train loss: 0.8386\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10:  99%|█████████▉| 4100/4149 [56:05<00:40,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, Batch: 4100, current train loss: 0.8400\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10: 100%|██████████| 4149/4149 [56:45<00:00,  1.22it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, processed 4149 batches, final average train loss: 0.8377\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 1, average validation loss: 0.6863, validation accuracy: 84.60%\n",
            "Validation loss improved. Saving model state.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:   2%|▏         | 100/4149 [01:22<55:20,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 100, current train loss: 0.6027\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:   5%|▍         | 200/4149 [02:44<53:59,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 200, current train loss: 0.5944\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:   7%|▋         | 300/4149 [04:06<52:36,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 300, current train loss: 0.5821\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  10%|▉         | 400/4149 [05:28<51:16,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 400, current train loss: 0.6097\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  12%|█▏        | 500/4149 [06:50<49:54,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 500, current train loss: 0.6048\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  14%|█▍        | 600/4149 [08:12<48:29,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 600, current train loss: 0.6033\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  17%|█▋        | 700/4149 [09:34<47:08,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 700, current train loss: 0.6158\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  19%|█▉        | 800/4149 [10:56<45:46,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 800, current train loss: 0.6227\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  22%|██▏       | 900/4149 [12:18<44:23,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 900, current train loss: 0.6180\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  24%|██▍       | 1000/4149 [13:40<43:03,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1000, current train loss: 0.6215\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  27%|██▋       | 1100/4149 [15:02<41:39,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1100, current train loss: 0.6195\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  29%|██▉       | 1200/4149 [16:24<40:19,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1200, current train loss: 0.6158\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  31%|███▏      | 1300/4149 [17:46<38:56,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1300, current train loss: 0.6143\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  34%|███▎      | 1400/4149 [19:08<37:35,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1400, current train loss: 0.6198\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  36%|███▌      | 1500/4149 [20:30<36:11,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1500, current train loss: 0.6259\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  39%|███▊      | 1600/4149 [21:52<34:52,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1600, current train loss: 0.6236\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  41%|████      | 1700/4149 [23:15<37:14,  1.10it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1700, current train loss: 0.6265\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  43%|████▎     | 1800/4149 [24:37<32:05,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1800, current train loss: 0.6281\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  46%|████▌     | 1900/4149 [25:59<30:43,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 1900, current train loss: 0.6301\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  48%|████▊     | 2000/4149 [27:21<29:22,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2000, current train loss: 0.6334\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  51%|█████     | 2100/4149 [28:43<28:01,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2100, current train loss: 0.6359\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  53%|█████▎    | 2200/4149 [30:05<26:38,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2200, current train loss: 0.6366\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  55%|█████▌    | 2300/4149 [31:27<25:17,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2300, current train loss: 0.6336\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  58%|█████▊    | 2400/4149 [32:49<23:53,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2400, current train loss: 0.6316\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  60%|██████    | 2500/4149 [34:11<22:32,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2500, current train loss: 0.6354\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  63%|██████▎   | 2600/4149 [35:33<21:11,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2600, current train loss: 0.6381\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  65%|██████▌   | 2700/4149 [36:55<19:48,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2700, current train loss: 0.6363\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2800, current train loss: 0.6345\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  70%|██████▉   | 2900/4149 [39:39<17:04,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 2900, current train loss: 0.6344\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  72%|███████▏  | 3000/4149 [41:01<15:42,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3000, current train loss: 0.6383\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  75%|███████▍  | 3100/4149 [42:23<14:20,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3100, current train loss: 0.6347\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  77%|███████▋  | 3200/4149 [43:45<12:57,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3200, current train loss: 0.6370\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  80%|███████▉  | 3300/4149 [45:07<11:35,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3300, current train loss: 0.6357\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  82%|████████▏ | 3400/4149 [46:29<10:14,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3400, current train loss: 0.6356\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  84%|████████▍ | 3500/4149 [47:51<08:52,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3500, current train loss: 0.6352\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  87%|████████▋ | 3600/4149 [49:13<07:30,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3600, current train loss: 0.6352\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  89%|████████▉ | 3700/4149 [50:35<06:08,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3700, current train loss: 0.6307\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  92%|█████████▏| 3800/4149 [51:57<04:46,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3800, current train loss: 0.6336\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  94%|█████████▍| 3900/4149 [53:19<03:24,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 3900, current train loss: 0.6322\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  96%|█████████▋| 4000/4149 [54:41<02:02,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 4000, current train loss: 0.6331\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10:  99%|█████████▉| 4100/4149 [56:03<00:40,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, Batch: 4100, current train loss: 0.6350\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10: 100%|██████████| 4149/4149 [56:44<00:00,  1.22it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, processed 4149 batches, final average train loss: 0.6337\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 2, average validation loss: 0.6044, validation accuracy: 85.83%\n",
            "Validation loss improved. Saving model state.\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:   2%|▏         | 100/4149 [01:22<55:22,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 100, current train loss: 0.5038\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:   5%|▍         | 200/4149 [02:44<54:00,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 200, current train loss: 0.5170\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:   7%|▋         | 300/4149 [04:06<52:37,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 300, current train loss: 0.5145\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  10%|▉         | 400/4149 [05:28<51:19,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 400, current train loss: 0.5108\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  12%|█▏        | 500/4149 [06:50<49:54,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 500, current train loss: 0.5215\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  14%|█▍        | 600/4149 [08:12<48:33,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 600, current train loss: 0.5185\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  17%|█▋        | 700/4149 [09:34<47:09,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 700, current train loss: 0.5189\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  19%|█▉        | 800/4149 [10:56<45:48,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 800, current train loss: 0.5118\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  22%|██▏       | 900/4149 [12:18<44:29,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 900, current train loss: 0.5264\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  24%|██▍       | 1000/4149 [13:40<43:06,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1000, current train loss: 0.5235\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  27%|██▋       | 1100/4149 [15:02<41:40,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1100, current train loss: 0.5220\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  29%|██▉       | 1200/4149 [16:24<40:19,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1200, current train loss: 0.5354\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  31%|███▏      | 1300/4149 [17:47<38:56,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1300, current train loss: 0.5372\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  34%|███▎      | 1400/4149 [19:09<37:35,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1400, current train loss: 0.5357\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  36%|███▌      | 1500/4149 [20:31<36:14,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1500, current train loss: 0.5456\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  39%|███▊      | 1600/4149 [21:53<34:51,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1600, current train loss: 0.5431\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  41%|████      | 1700/4149 [23:15<33:29,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1700, current train loss: 0.5411\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  43%|████▎     | 1800/4149 [24:37<32:06,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1800, current train loss: 0.5370\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  46%|████▌     | 1900/4149 [25:59<30:44,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 1900, current train loss: 0.5434\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  48%|████▊     | 2000/4149 [27:21<29:23,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2000, current train loss: 0.5432\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  51%|█████     | 2100/4149 [28:43<28:01,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2100, current train loss: 0.5376\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  53%|█████▎    | 2200/4149 [30:05<26:40,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2200, current train loss: 0.5337\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  55%|█████▌    | 2300/4149 [31:27<26:16,  1.17it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2300, current train loss: 0.5302\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  58%|█████▊    | 2400/4149 [32:49<23:54,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2400, current train loss: 0.5305\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  60%|██████    | 2500/4149 [34:11<22:32,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2500, current train loss: 0.5323\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3/10:  63%|██████▎   | 2600/4149 [35:33<21:10,  1.22it/s]"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2600, current train loss: 0.5305\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  65%|██████▌   | 2700/4149 [36:55<19:48,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2700, current train loss: 0.5288\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2800, current train loss: 0.5270\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  70%|██████▉   | 2900/4149 [39:39<17:04,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 2900, current train loss: 0.5280\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  72%|███████▏  | 3000/4149 [41:01<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3000, current train loss: 0.5267\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  75%|███████▍  | 3100/4149 [42:23<14:20,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3100, current train loss: 0.5263\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  77%|███████▋  | 3200/4149 [43:46<12:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3200, current train loss: 0.5269\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  80%|███████▉  | 3300/4149 [45:08<11:37,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3300, current train loss: 0.5238\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  82%|████████▏ | 3400/4149 [46:30<10:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3400, current train loss: 0.5212\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  84%|████████▍ | 3500/4149 [47:52<08:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3500, current train loss: 0.5233\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  87%|████████▋ | 3600/4149 [49:14<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3600, current train loss: 0.5234\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  89%|████████▉ | 3700/4149 [50:36<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3700, current train loss: 0.5257\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  92%|█████████▏| 3800/4149 [51:58<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3800, current train loss: 0.5228\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  94%|█████████▍| 3900/4149 [53:20<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 3900, current train loss: 0.5230\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  96%|█████████▋| 4000/4149 [54:42<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 4000, current train loss: 0.5216\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10:  99%|█████████▉| 4100/4149 [56:04<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, Batch: 4100, current train loss: 0.5201\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10: 100%|██████████| 4149/4149 [56:44<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, processed 4149 batches, final average train loss: 0.5191\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 3/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 3, average validation loss: 0.5585, validation accuracy: 86.74%\n",
            "Validation loss improved. Saving model state.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:   2%|▏         | 100/4149 [01:22<55:21,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 100, current train loss: 0.4337\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:   5%|▍         | 200/4149 [02:44<54:00,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 200, current train loss: 0.3876\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:   7%|▋         | 300/4149 [04:06<52:36,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 300, current train loss: 0.3969\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  10%|▉         | 400/4149 [05:28<51:12,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 400, current train loss: 0.3794\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  12%|█▏        | 500/4149 [06:50<49:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 500, current train loss: 0.3988\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  14%|█▍        | 600/4149 [08:12<48:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 600, current train loss: 0.4198\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  17%|█▋        | 700/4149 [09:34<47:09,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 700, current train loss: 0.4120\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  19%|█▉        | 800/4149 [10:56<45:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 800, current train loss: 0.4118\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  22%|██▏       | 900/4149 [12:18<44:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 900, current train loss: 0.4235\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  24%|██▍       | 1000/4149 [13:40<43:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1000, current train loss: 0.4204\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  27%|██▋       | 1100/4149 [15:02<41:41,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1100, current train loss: 0.4245\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  29%|██▉       | 1200/4149 [16:24<40:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1200, current train loss: 0.4299\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  31%|███▏      | 1300/4149 [17:46<38:55,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1300, current train loss: 0.4300\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  34%|███▎      | 1400/4149 [19:08<37:34,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1400, current train loss: 0.4334\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  36%|███▌      | 1500/4149 [20:30<36:13,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1500, current train loss: 0.4341\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  39%|███▊      | 1600/4149 [21:52<34:51,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1600, current train loss: 0.4278\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  41%|████      | 1700/4149 [23:15<33:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1700, current train loss: 0.4327\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  43%|████▎     | 1800/4149 [24:37<32:07,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1800, current train loss: 0.4358\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  46%|████▌     | 1900/4149 [25:59<30:49,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 1900, current train loss: 0.4366\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  48%|████▊     | 2000/4149 [27:21<29:22,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2000, current train loss: 0.4367\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  51%|█████     | 2100/4149 [28:43<27:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2100, current train loss: 0.4389\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  53%|█████▎    | 2200/4149 [30:05<26:38,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2200, current train loss: 0.4383\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  55%|█████▌    | 2300/4149 [31:27<25:16,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2300, current train loss: 0.4393\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  58%|█████▊    | 2400/4149 [32:49<23:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2400, current train loss: 0.4387\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  60%|██████    | 2500/4149 [34:11<22:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2500, current train loss: 0.4402\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  63%|██████▎   | 2600/4149 [35:33<21:11,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2600, current train loss: 0.4444\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  65%|██████▌   | 2700/4149 [36:55<19:48,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2700, current train loss: 0.4418\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2800, current train loss: 0.4424\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  70%|██████▉   | 2900/4149 [39:39<17:05,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 2900, current train loss: 0.4456\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  72%|███████▏  | 3000/4149 [41:02<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3000, current train loss: 0.4472\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  75%|███████▍  | 3100/4149 [42:24<14:20,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3100, current train loss: 0.4451\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  77%|███████▋  | 3200/4149 [43:46<12:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3200, current train loss: 0.4440\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  80%|███████▉  | 3300/4149 [45:08<11:37,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3300, current train loss: 0.4414\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  82%|████████▏ | 3400/4149 [46:30<10:15,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3400, current train loss: 0.4415\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  84%|████████▍ | 3500/4149 [47:52<08:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3500, current train loss: 0.4402\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  87%|████████▋ | 3600/4149 [49:14<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3600, current train loss: 0.4376\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  89%|████████▉ | 3700/4149 [50:36<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3700, current train loss: 0.4368\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  92%|█████████▏| 3800/4149 [51:58<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3800, current train loss: 0.4328\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  94%|█████████▍| 3900/4149 [53:20<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 3900, current train loss: 0.4349\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  96%|█████████▋| 4000/4149 [54:42<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 4000, current train loss: 0.4353\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10:  99%|█████████▉| 4100/4149 [56:04<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, Batch: 4100, current train loss: 0.4367\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10: 100%|██████████| 4149/4149 [56:45<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, processed 4149 batches, final average train loss: 0.4362\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 4/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 4, average validation loss: 0.5445, validation accuracy: 87.08%\n",
            "Validation loss improved. Saving model state.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:   2%|▏         | 100/4149 [01:22<55:22,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 100, current train loss: 0.3738\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:   5%|▍         | 200/4149 [02:44<54:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 200, current train loss: 0.3489\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:   7%|▋         | 300/4149 [04:06<52:39,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 300, current train loss: 0.3667\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  10%|▉         | 400/4149 [05:28<51:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 400, current train loss: 0.3699\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  12%|█▏        | 500/4149 [06:50<49:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 500, current train loss: 0.3788\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  14%|█▍        | 600/4149 [08:12<48:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 600, current train loss: 0.3611\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  17%|█▋        | 700/4149 [09:34<47:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 700, current train loss: 0.3511\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  19%|█▉        | 800/4149 [10:56<45:49,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 800, current train loss: 0.3520\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  22%|██▏       | 900/4149 [12:18<44:25,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 900, current train loss: 0.3537\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  24%|██▍       | 1000/4149 [13:40<43:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1000, current train loss: 0.3576\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  27%|██▋       | 1100/4149 [15:02<41:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1100, current train loss: 0.3607\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  29%|██▉       | 1200/4149 [16:24<40:17,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1200, current train loss: 0.3681\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  31%|███▏      | 1300/4149 [17:46<38:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1300, current train loss: 0.3619\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  34%|███▎      | 1400/4149 [19:09<37:39,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1400, current train loss: 0.3626\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  36%|███▌      | 1500/4149 [20:31<36:13,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1500, current train loss: 0.3590\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  39%|███▊      | 1600/4149 [21:53<34:51,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1600, current train loss: 0.3597\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  41%|████      | 1700/4149 [23:15<33:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1700, current train loss: 0.3609\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  43%|████▎     | 1800/4149 [24:37<32:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1800, current train loss: 0.3636\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  46%|████▌     | 1900/4149 [25:59<30:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 1900, current train loss: 0.3624\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  48%|████▊     | 2000/4149 [27:21<29:25,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2000, current train loss: 0.3609\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  51%|█████     | 2100/4149 [28:43<28:00,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2100, current train loss: 0.3629\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  53%|█████▎    | 2200/4149 [30:05<26:38,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2200, current train loss: 0.3639\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  55%|█████▌    | 2300/4149 [31:27<25:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2300, current train loss: 0.3600\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  58%|█████▊    | 2400/4149 [32:50<23:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2400, current train loss: 0.3623\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  60%|██████    | 2500/4149 [34:12<22:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2500, current train loss: 0.3617\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  63%|██████▎   | 2600/4149 [35:34<21:10,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2600, current train loss: 0.3629\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  65%|██████▌   | 2700/4149 [36:56<19:48,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2700, current train loss: 0.3607\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  67%|██████▋   | 2800/4149 [38:18<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2800, current train loss: 0.3615\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  70%|██████▉   | 2900/4149 [39:40<17:06,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 2900, current train loss: 0.3621\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  72%|███████▏  | 3000/4149 [41:02<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3000, current train loss: 0.3659\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  75%|███████▍  | 3100/4149 [42:24<14:21,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3100, current train loss: 0.3662\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  77%|███████▋  | 3200/4149 [43:46<13:01,  1.21it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3200, current train loss: 0.3643\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  80%|███████▉  | 3300/4149 [45:08<11:37,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3300, current train loss: 0.3620\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  82%|████████▏ | 3400/4149 [46:31<10:15,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3400, current train loss: 0.3627\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  84%|████████▍ | 3500/4149 [47:53<08:53,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3500, current train loss: 0.3628\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  87%|████████▋ | 3600/4149 [49:15<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3600, current train loss: 0.3622\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  89%|████████▉ | 3700/4149 [50:37<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3700, current train loss: 0.3617\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  92%|█████████▏| 3800/4149 [51:59<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3800, current train loss: 0.3624\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  94%|█████████▍| 3900/4149 [53:22<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 3900, current train loss: 0.3635\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  96%|█████████▋| 4000/4149 [54:44<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 4000, current train loss: 0.3630\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10:  99%|█████████▉| 4100/4149 [56:06<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, Batch: 4100, current train loss: 0.3632\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10: 100%|██████████| 4149/4149 [56:46<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, processed 4149 batches, final average train loss: 0.3639\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 5/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 5, average validation loss: 0.5401, validation accuracy: 87.47%\n",
            "Validation loss improved. Saving model state.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:   2%|▏         | 100/4149 [01:22<55:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 100, current train loss: 0.3400\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:   5%|▍         | 200/4149 [02:44<54:01,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 200, current train loss: 0.3031\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:   7%|▋         | 300/4149 [04:06<52:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 300, current train loss: 0.3089\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  10%|▉         | 400/4149 [05:28<51:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 400, current train loss: 0.3060\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  12%|█▏        | 500/4149 [06:50<49:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 500, current train loss: 0.2999\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  14%|█▍        | 600/4149 [08:12<48:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 600, current train loss: 0.2999\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  17%|█▋        | 700/4149 [09:34<47:07,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 700, current train loss: 0.2984\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  19%|█▉        | 800/4149 [10:56<45:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 800, current train loss: 0.2960\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  22%|██▏       | 900/4149 [12:18<44:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 900, current train loss: 0.3044\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  24%|██▍       | 1000/4149 [13:40<43:04,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1000, current train loss: 0.3050\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  27%|██▋       | 1100/4149 [15:02<41:39,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1100, current train loss: 0.3059\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  29%|██▉       | 1200/4149 [16:24<40:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1200, current train loss: 0.3049\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  31%|███▏      | 1300/4149 [17:46<38:57,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1300, current train loss: 0.3056\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  34%|███▎      | 1400/4149 [19:08<37:34,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1400, current train loss: 0.3040\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  36%|███▌      | 1500/4149 [20:30<36:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1500, current train loss: 0.3051\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  39%|███▊      | 1600/4149 [21:53<34:51,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1600, current train loss: 0.3067\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  41%|████      | 1700/4149 [23:15<33:28,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1700, current train loss: 0.3118\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  43%|████▎     | 1800/4149 [24:37<32:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1800, current train loss: 0.3120\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  46%|████▌     | 1900/4149 [25:59<30:45,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 1900, current train loss: 0.3111\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  48%|████▊     | 2000/4149 [27:21<29:22,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2000, current train loss: 0.3073\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  51%|█████     | 2100/4149 [28:43<28:00,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2100, current train loss: 0.3062\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  53%|█████▎    | 2200/4149 [30:05<26:38,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2200, current train loss: 0.3038\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  55%|█████▌    | 2300/4149 [31:27<25:17,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2300, current train loss: 0.3060\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  58%|█████▊    | 2400/4149 [32:49<23:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2400, current train loss: 0.3053\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  60%|██████    | 2500/4149 [34:11<22:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2500, current train loss: 0.3039\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  63%|██████▎   | 2600/4149 [35:33<21:10,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2600, current train loss: 0.3018\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  65%|██████▌   | 2700/4149 [36:55<19:47,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2700, current train loss: 0.3015\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2800, current train loss: 0.3030\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  70%|██████▉   | 2900/4149 [39:39<17:03,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 2900, current train loss: 0.3033\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  72%|███████▏  | 3000/4149 [41:01<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3000, current train loss: 0.2997\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  75%|███████▍  | 3100/4149 [42:23<14:20,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3100, current train loss: 0.2990\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  77%|███████▋  | 3200/4149 [43:45<12:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3200, current train loss: 0.3018\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  80%|███████▉  | 3300/4149 [45:07<11:36,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3300, current train loss: 0.3050\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  82%|████████▏ | 3400/4149 [46:30<10:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3400, current train loss: 0.3051\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  84%|████████▍ | 3500/4149 [47:52<08:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3500, current train loss: 0.3039\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  87%|████████▋ | 3600/4149 [49:14<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3600, current train loss: 0.3035\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  89%|████████▉ | 3700/4149 [50:36<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3700, current train loss: 0.3035\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  92%|█████████▏| 3800/4149 [51:58<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3800, current train loss: 0.3059\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  94%|█████████▍| 3900/4149 [53:20<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 3900, current train loss: 0.3062\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  96%|█████████▋| 4000/4149 [54:42<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 4000, current train loss: 0.3059\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10:  99%|█████████▉| 4100/4149 [56:04<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, Batch: 4100, current train loss: 0.3038\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10: 100%|██████████| 4149/4149 [56:44<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, processed 4149 batches, final average train loss: 0.3029\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 6/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 6, average validation loss: 0.5423, validation accuracy: 87.66%\n",
            "Validation loss did not improve. Epochs with no improvement: 1/3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:   2%|▏         | 100/4149 [01:22<55:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 100, current train loss: 0.2117\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:   5%|▍         | 200/4149 [02:44<53:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 200, current train loss: 0.2535\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:   7%|▋         | 300/4149 [04:06<52:35,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 300, current train loss: 0.2596\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  10%|▉         | 400/4149 [05:28<51:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 400, current train loss: 0.2447\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  12%|█▏        | 500/4149 [06:50<49:53,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 500, current train loss: 0.2381\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  14%|█▍        | 600/4149 [08:12<48:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 600, current train loss: 0.2426\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  17%|█▋        | 700/4149 [09:34<47:09,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 700, current train loss: 0.2388\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  19%|█▉        | 800/4149 [10:56<45:47,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 800, current train loss: 0.2418\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  22%|██▏       | 900/4149 [12:18<44:28,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 900, current train loss: 0.2424\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  24%|██▍       | 1000/4149 [13:40<43:01,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1000, current train loss: 0.2416\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  27%|██▋       | 1100/4149 [15:02<41:39,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1100, current train loss: 0.2343\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  29%|██▉       | 1200/4149 [16:24<40:21,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1200, current train loss: 0.2339\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  31%|███▏      | 1300/4149 [17:46<38:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1300, current train loss: 0.2392\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  34%|███▎      | 1400/4149 [19:08<37:35,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1400, current train loss: 0.2380\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  36%|███▌      | 1500/4149 [20:30<36:12,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1500, current train loss: 0.2418\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  39%|███▊      | 1600/4149 [21:52<34:50,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1600, current train loss: 0.2441\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  41%|████      | 1700/4149 [23:14<33:29,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1700, current train loss: 0.2460\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  43%|████▎     | 1800/4149 [24:37<32:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1800, current train loss: 0.2451\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  46%|████▌     | 1900/4149 [25:59<30:44,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 1900, current train loss: 0.2403\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  48%|████▊     | 2000/4149 [27:21<29:23,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2000, current train loss: 0.2396\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  51%|█████     | 2100/4149 [28:43<28:01,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2100, current train loss: 0.2420\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  53%|█████▎    | 2200/4149 [30:05<26:39,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2200, current train loss: 0.2450\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  55%|█████▌    | 2300/4149 [31:27<25:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2300, current train loss: 0.2452\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  58%|█████▊    | 2400/4149 [32:49<23:57,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2400, current train loss: 0.2459\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  60%|██████    | 2500/4149 [34:11<22:32,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2500, current train loss: 0.2447\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  63%|██████▎   | 2600/4149 [35:33<21:10,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2600, current train loss: 0.2417\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  65%|██████▌   | 2700/4149 [36:55<19:49,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2700, current train loss: 0.2442\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2800, current train loss: 0.2440\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  70%|██████▉   | 2900/4149 [39:39<17:03,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 2900, current train loss: 0.2448\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  72%|███████▏  | 3000/4149 [41:01<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3000, current train loss: 0.2462\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  75%|███████▍  | 3100/4149 [42:23<14:19,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3100, current train loss: 0.2457\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  77%|███████▋  | 3200/4149 [43:45<12:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3200, current train loss: 0.2462\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  80%|███████▉  | 3300/4149 [45:08<11:36,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3300, current train loss: 0.2482\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  82%|████████▏ | 3400/4149 [46:30<10:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3400, current train loss: 0.2470\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  84%|████████▍ | 3500/4149 [47:52<08:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3500, current train loss: 0.2476\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  87%|████████▋ | 3600/4149 [49:14<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3600, current train loss: 0.2472\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  89%|████████▉ | 3700/4149 [50:36<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3700, current train loss: 0.2476\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  92%|█████████▏| 3800/4149 [51:58<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3800, current train loss: 0.2461\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  94%|█████████▍| 3900/4149 [53:20<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 3900, current train loss: 0.2462\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  96%|█████████▋| 4000/4149 [54:42<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 4000, current train loss: 0.2474\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10:  99%|█████████▉| 4100/4149 [56:04<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, Batch: 4100, current train loss: 0.2461\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10: 100%|██████████| 4149/4149 [56:44<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, processed 4149 batches, final average train loss: 0.2468\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 7/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 7, average validation loss: 0.5426, validation accuracy: 87.64%\n",
            "Validation loss did not improve. Epochs with no improvement: 2/3\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:   2%|▏         | 100/4149 [01:22<55:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 100, current train loss: 0.1603\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:   5%|▍         | 200/4149 [02:44<54:00,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 200, current train loss: 0.2387\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:   7%|▋         | 300/4149 [04:06<52:41,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 300, current train loss: 0.2147\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  10%|▉         | 400/4149 [05:28<51:15,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 400, current train loss: 0.2113\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  12%|█▏        | 500/4149 [06:50<49:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 500, current train loss: 0.2081\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  14%|█▍        | 600/4149 [08:12<48:31,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 600, current train loss: 0.2021\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  17%|█▋        | 700/4149 [09:34<47:10,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 700, current train loss: 0.1934\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  19%|█▉        | 800/4149 [10:56<45:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 800, current train loss: 0.2021\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  22%|██▏       | 900/4149 [12:18<44:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 900, current train loss: 0.1974\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  24%|██▍       | 1000/4149 [13:40<43:03,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1000, current train loss: 0.1975\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  27%|██▋       | 1100/4149 [15:02<41:41,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1100, current train loss: 0.1999\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  29%|██▉       | 1200/4149 [16:24<40:18,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1200, current train loss: 0.2047\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  31%|███▏      | 1300/4149 [17:46<38:57,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1300, current train loss: 0.2049\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  34%|███▎      | 1400/4149 [19:09<37:35,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1400, current train loss: 0.2012\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  36%|███▌      | 1500/4149 [20:31<36:12,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1500, current train loss: 0.1995\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  39%|███▊      | 1600/4149 [21:53<34:49,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1600, current train loss: 0.2001\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  41%|████      | 1700/4149 [23:15<33:28,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1700, current train loss: 0.2070\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  43%|████▎     | 1800/4149 [24:37<32:06,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1800, current train loss: 0.2052\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  46%|████▌     | 1900/4149 [25:59<30:44,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 1900, current train loss: 0.2047\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  48%|████▊     | 2000/4149 [27:21<29:25,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2000, current train loss: 0.2053\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  51%|█████     | 2100/4149 [28:43<28:00,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2100, current train loss: 0.2043\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  53%|█████▎    | 2200/4149 [30:05<26:41,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2200, current train loss: 0.2035\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  55%|█████▌    | 2300/4149 [31:27<25:16,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2300, current train loss: 0.2014\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  58%|█████▊    | 2400/4149 [32:49<23:54,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2400, current train loss: 0.2027\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  60%|██████    | 2500/4149 [34:11<22:33,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2500, current train loss: 0.2052\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  63%|██████▎   | 2600/4149 [35:33<21:10,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2600, current train loss: 0.2048\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  65%|██████▌   | 2700/4149 [36:55<19:48,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2700, current train loss: 0.2034\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  67%|██████▋   | 2800/4149 [38:17<18:26,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2800, current train loss: 0.2032\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  70%|██████▉   | 2900/4149 [39:39<17:04,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 2900, current train loss: 0.2017\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  72%|███████▏  | 3000/4149 [41:02<15:42,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3000, current train loss: 0.2047\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  75%|███████▍  | 3100/4149 [42:24<14:20,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3100, current train loss: 0.2026\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  77%|███████▋  | 3200/4149 [43:46<12:58,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3200, current train loss: 0.2020\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  80%|███████▉  | 3300/4149 [45:08<11:38,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3300, current train loss: 0.2026\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  82%|████████▏ | 3400/4149 [46:30<10:14,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3400, current train loss: 0.2006\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  84%|████████▍ | 3500/4149 [47:52<08:52,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3500, current train loss: 0.2002\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  87%|████████▋ | 3600/4149 [49:14<07:30,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3600, current train loss: 0.2012\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  89%|████████▉ | 3700/4149 [50:36<06:08,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3700, current train loss: 0.2009\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  92%|█████████▏| 3800/4149 [51:58<04:46,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3800, current train loss: 0.2012\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  94%|█████████▍| 3900/4149 [53:20<03:24,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 3900, current train loss: 0.2022\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  96%|█████████▋| 4000/4149 [54:42<02:02,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 4000, current train loss: 0.2019\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10:  99%|█████████▉| 4100/4149 [56:04<00:40,  1.22it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, Batch: 4100, current train loss: 0.2025\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10: 100%|██████████| 4149/4149 [56:45<00:00,  1.22it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, processed 4149 batches, final average train loss: 0.2024\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 8/10 (Validation): 100%|██████████| 519/519 [03:27<00:00,  2.50it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch: 8, average validation loss: 0.5534, validation accuracy: 87.80%\n",
            "Validation loss did not improve. Epochs with no improvement: 3/3\n",
            "Early stopping triggered after 8 epochs. Validation loss did not improve for 3 consecutive epochs.\n",
            "Training finished.\n",
            "Loaded model state with the best validation loss.\n",
            "Training completed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming the train function was called and returned 'history'\n",
        "# Example: best_model, history = train(...)\n",
        "\n",
        "if 'history' in locals() and history is not None:\n",
        "    # Create a figure with two subplots (1 row, 2 columns)\n",
        "    fig, axes = plt.subplots(1, 2, figsize=(15, 6))\n",
        "\n",
        "    # Plot Loss on the left subplot\n",
        "    axes[0].plot(history['train_loss'], label='Training Loss')\n",
        "    axes[0].plot(history['val_loss'], label='Validation Loss')\n",
        "    axes[0].set_title('Training and Validation Loss per Epoch')\n",
        "    axes[0].set_xlabel('Epoch')\n",
        "    axes[0].set_ylabel('Loss')\n",
        "    axes[0].legend()\n",
        "    axes[0].grid(True)\n",
        "\n",
        "    # Plot Accuracy on the right subplot\n",
        "    axes[1].plot(history['val_accuracy'], label='Validation Accuracy', color='green')\n",
        "    axes[1].set_title('Validation Accuracy per Epoch')\n",
        "    axes[1].set_xlabel('Epoch')\n",
        "    axes[1].set_ylabel('Accuracy (%)')\n",
        "    axes[1].legend()\n",
        "    axes[1].grid(True)\n",
        "\n",
        "    # Adjust layout to prevent titles/labels from overlapping\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"Training history not available. Please run the training cell first.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "p9_PGpqkBiQN",
        "outputId": "886a08ca-bcff-4950-ac5d-baab24363240"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model evaluation"
      ],
      "metadata": {
        "id": "2JlBR2LHnCpP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Qwen3-0.6B"
      ],
      "metadata": {
        "id": "nyt09gytZm5Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_sample_logprob(sample, model):\n",
        "    model.eval()\n",
        "    model.to(device)\n",
        "\n",
        "    # Extract input_ids and attention_mask from the sample\n",
        "    input_ids = sample[\"input_ids\"].unsqueeze(0).to(device) # Add batch dimension: (1, sequence_length)\n",
        "    attention_mask = sample[\"attention_mask\"].unsqueeze(0).to(device)\n",
        "\n",
        "    # Disable gradient calculation because the model is not used for training\n",
        "    with torch.no_grad():\n",
        "        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n",
        "\n",
        "    # logits shape: (batch_size, seq_len, vocab_size)\n",
        "    logits = outputs.logits\n",
        "\n",
        "    # Calculate log probabilities for each token (except first start token)\n",
        "    total_log_prob = 0.0\n",
        "    for i in range(1, input_ids.shape[1]):\n",
        "        # Get logits for the previous position predicting the current token\n",
        "        if attention_mask[0, i] == 1:\n",
        "            current_logits = logits[0, i-1, :]\n",
        "            current_token_id = input_ids[0, i]\n",
        "            log_prob = torch.log_softmax(current_logits, dim=-1)[current_token_id].item()\n",
        "            total_log_prob += log_prob\n",
        "\n",
        "    return total_log_prob"
      ],
      "metadata": {
        "id": "nd4PfIIwnRMR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tqdm\n",
        "\n",
        "correct_pairs = 0\n",
        "total_pairs = 0\n",
        "\n",
        "# Iterate directly over the test_dataset which now yields paired data\n",
        "for pair_data in tqdm.tqdm(test_dataset, desc=\"Evaluating model\"):\n",
        "    total_pairs += 1\n",
        "\n",
        "    # Extract correct and ungrammatical sentence data from the paired item\n",
        "    correct_sample = {\n",
        "        \"input_ids\": pair_data[\"correct_input_ids\"],\n",
        "        \"attention_mask\": pair_data[\"correct_attention_mask\"],\n",
        "    }\n",
        "    ungrammatical_sample = {\n",
        "        \"input_ids\": pair_data[\"ungrammatical_input_ids\"],\n",
        "        \"attention_mask\": pair_data[\"ungrammatical_attention_mask\"],\n",
        "    }\n",
        "\n",
        "    # Calculate log probabilities for the pair\n",
        "    # Ensure the model is on the correct device before calling get_sample_logprob\n",
        "    prob_correct = get_sample_logprob(correct_sample, model)\n",
        "    prob_ungrammatical = get_sample_logprob(ungrammatical_sample, model)\n",
        "\n",
        "    # Calculate overall correct count\n",
        "    if prob_correct > prob_ungrammatical:\n",
        "        correct_pairs += 1\n",
        "\n",
        "# Calculate overall accuracy\n",
        "overall_accuracy = (correct_pairs / total_pairs) * 100 if total_pairs > 0 else 0\n",
        "\n",
        "print(f\"\\nFinal Test Set Accuracy (Fine-tuned Model): {overall_accuracy:.2f}% ({correct_pairs}/{total_pairs})\")"
      ],
      "metadata": {
        "id": "bDI_NJSbsr7f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "14c3d7fb-dd8f-4b9a-af8f-5b2662edafa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Evaluating model: 100%|██████████| 4149/4149 [10:24<00:00,  6.64it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Final Test Set Accuracy (Fine-tuned Model): 87.25% (3620/4149)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tqdm\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "# No need to import defaultdict here as new_grouped_pairs is already a defaultdict\n",
        "\n",
        "# The length bins and grouped test pairs (new_grouped_pairs) are already defined and calculated in cell FydFFbnJm6Uq.\n",
        "# We will reuse them directly.\n",
        "\n",
        "# Evaluate accuracy and calculate softmax probability over the two sentence log probabilities for each length bin\n",
        "print(\"\\nEvaluating accuracy and calculating softmax probability over two sentence log probabilities for each length bin:\")\n",
        "\n",
        "new_length_group_accuracy = {}\n",
        "new_length_group_metric = {} # This will store the average of the softmax probability over the two sentence log probabilities\n",
        "\n",
        "# Sort by label for ordered output (reuse sort_key)\n",
        "def sort_key(label):\n",
        "    if '-' in label:\n",
        "        try:\n",
        "            return int(label.split('-')[0])\n",
        "        except ValueError:\n",
        "            pass\n",
        "    elif '+' in label:\n",
        "         try:\n",
        "             return int(label.split('+')[0])\n",
        "         except ValueError:\n",
        "              pass\n",
        "    return label\n",
        "\n",
        "# Ensure the model is in evaluation mode and on the correct device\n",
        "# Access the model object from the best_model tuple (it's the first element)\n",
        "eval_model = best_model\n",
        "eval_model.eval()\n",
        "eval_model.to(device)\n",
        "\n",
        "# Use the already calculated new_grouped_pairs (which contains the test pairs grouped by length)\n",
        "for label, pairs in sorted(new_grouped_pairs.items(), key=lambda item: sort_key(item[0])):\n",
        "    correct_predictions_bin = 0\n",
        "    total_pairs_bin = len(pairs)\n",
        "    group_metric_sum = 0.0 # Sum of softmax probabilities over two sentence log probabilities for this bin\n",
        "\n",
        "\n",
        "    if total_pairs_bin == 0:\n",
        "        print(f\"Length bin '{label}': 0 pairs, Accuracy: N/A, Average Softmax Probability over Sentence Log Probabilities: N/A\")\n",
        "        continue\n",
        "\n",
        "    # Create a dataset and dataloader for the current bin's pairs\n",
        "    # GrammarCheckDataset is designed to take a list of pairs\n",
        "    bin_dataset = GrammarCheckDataset(pairs, tokenizer)\n",
        "    # Reduce batch size for evaluation to mitigate OutOfMemoryError\n",
        "    evaluation_batch_size = 4 # You can adjust this value based on your GPU memory\n",
        "    bin_dataloader = DataLoader(bin_dataset, batch_size=evaluation_batch_size) # Use a smaller batch size for evaluation\n",
        "\n",
        "    for batch in tqdm.tqdm(bin_dataloader, desc=f\"Processing bin '{label}'\"):\n",
        "        correct_input_ids = batch[\"correct_input_ids\"].to(device)\n",
        "        correct_attention_mask = batch[\"correct_attention_mask\"].to(device)\n",
        "        ungrammatical_input_ids = batch[\"ungrammatical_input_ids\"].to(device)\n",
        "        ungrammatical_attention_mask = batch[\"ungrammatical_attention_mask\"].to(device)\n",
        "\n",
        "\n",
        "        # Forward pass for correct and ungrammatical sentences using eval_model\n",
        "        with torch.no_grad():\n",
        "            outputs_correct = eval_model(input_ids=correct_input_ids, attention_mask=correct_attention_mask)\n",
        "            correct_logits = outputs_correct.logits\n",
        "\n",
        "            outputs_ungrammatical = eval_model(input_ids=ungrammatical_input_ids, attention_mask=ungrammatical_attention_mask)\n",
        "            ungrammatical_logits = outputs_ungrammatical.logits\n",
        "\n",
        "\n",
        "        # Calculate sentence log probabilities\n",
        "        # For correct sentences\n",
        "        shifted_correct_logits = correct_logits[:, :-1, :].contiguous()\n",
        "        correct_target_ids = correct_input_ids[:, 1:]\n",
        "        correct_target_mask = correct_attention_mask[:, 1:]\n",
        "        log_probs_correct_all = torch.log_softmax(shifted_correct_logits, dim=-1)\n",
        "        one_hot_correct_target_ids = F.one_hot(correct_target_ids, num_classes=log_probs_correct_all.size(-1)).float()\n",
        "        selected_log_probs_correct = torch.einsum('bsv,bsv->bs', log_probs_correct_all, one_hot_correct_target_ids)\n",
        "        masked_log_probs_correct = selected_log_probs_correct * correct_target_mask.float()\n",
        "        sentence_log_probs_correct = masked_log_probs_correct.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "        # For ungrammatical sentences\n",
        "        shifted_ungrammatical_logits = ungrammatical_logits[:, :-1, :].contiguous()\n",
        "        ungrammatical_target_ids = ungrammatical_input_ids[:, 1:]\n",
        "        ungrammatical_target_mask = ungrammatical_attention_mask[:, 1:]\n",
        "        log_probs_ungrammatical_all = torch.log_softmax(shifted_ungrammatical_logits, dim=-1)\n",
        "        one_hot_ungrammatical_target_ids = F.one_hot(ungrammatical_target_ids, num_classes=log_probs_ungrammatical_all.size(-1)).float()\n",
        "        selected_log_probs_ungrammatical = torch.einsum('bsv,bsv->bs', log_probs_ungrammatical_all, one_hot_ungrammatical_target_ids)\n",
        "        masked_log_probs_ungrammatical = selected_log_probs_ungrammatical * ungrammatical_target_mask.float()\n",
        "        sentence_log_probs_ungrammatical = masked_log_probs_ungrammatical.sum(dim=-1) # (batch_size,)\n",
        "\n",
        "        # Compare log probabilities within each pair (for Accuracy)\n",
        "        for i in range(sentence_log_probs_correct.shape[0]):\n",
        "            if sentence_log_probs_correct[i] > sentence_log_probs_ungrammatical[i]:\n",
        "                correct_predictions_bin += 1\n",
        "\n",
        "        # Calculate softmax probability over the two sentence log probabilities for each pair in the batch\n",
        "        # Stack log probabilities for softmax\n",
        "        stacked_log_probs = torch.stack([sentence_log_probs_ungrammatical, sentence_log_probs_correct], dim=-1) # (batch_size, 2)\n",
        "        softmax_probs = torch.softmax(stacked_log_probs, dim=-1) # (batch_size, 2)\n",
        "\n",
        "        # The metric value is the softmax probability corresponding to the correct sentence (index 1)\n",
        "        metric_values_batch = softmax_probs[:, 1] # (batch_size,)\n",
        "\n",
        "        group_metric_sum += metric_values_batch.sum().item()\n",
        "\n",
        "\n",
        "    # Calculate accuracy and average softmax probability metric for the current bin\n",
        "    accuracy_bin = (correct_predictions_bin / total_pairs_bin) * 100 if total_pairs_bin > 0 else 0\n",
        "    average_metric_bin = group_metric_sum / total_pairs_bin if total_pairs_bin > 0 else 0\n",
        "\n",
        "    new_length_group_accuracy[label] = accuracy_bin\n",
        "    new_length_group_metric[label] = average_metric_bin\n",
        "\n",
        "    print(f\"Length bin '{label}': {total_pairs_bin} pairs, Accuracy: {accuracy_bin:.2f}%, Average Softmax Probability over Sentence Log Probabilities: {average_metric_bin:.4f}\")\n",
        "\n",
        "# Print overall results by new length group\n",
        "print(\"\\nEvaluation Results by New Length Group:\")\n",
        "for label, accuracy in sorted(new_length_group_accuracy.items(), key=lambda item: sort_key(item[0])):\n",
        "    metric = new_length_group_metric[label]\n",
        "    print(f\"'{label}': Accuracy={accuracy:.2f}%, Average Softmax Probability over Sentence Log Probabilities: {metric:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mh_xuuJMp_Gy",
        "outputId": "6a4b1479-e495-47d5-c8e3-4ef279823340"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Evaluating accuracy and calculating softmax probability over two sentence log probabilities for each length bin:\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '0-9': 100%|██████████| 77/77 [00:15<00:00,  4.97it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '0-9': 308 pairs, Accuracy: 76.62%, Average Softmax Probability over Sentence Log Probabilities: 0.7489\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '10-19': 100%|██████████| 273/273 [00:54<00:00,  4.97it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '10-19': 1091 pairs, Accuracy: 81.48%, Average Softmax Probability over Sentence Log Probabilities: 0.8013\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '20-29': 100%|██████████| 165/165 [00:33<00:00,  4.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '20-29': 657 pairs, Accuracy: 87.98%, Average Softmax Probability over Sentence Log Probabilities: 0.8674\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '30-39': 100%|██████████| 140/140 [00:28<00:00,  4.96it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '30-39': 560 pairs, Accuracy: 88.75%, Average Softmax Probability over Sentence Log Probabilities: 0.8733\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '40-49': 100%|██████████| 121/121 [00:24<00:00,  4.97it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '40-49': 481 pairs, Accuracy: 91.27%, Average Softmax Probability over Sentence Log Probabilities: 0.9056\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '50-59': 100%|██████████| 86/86 [00:17<00:00,  4.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '50-59': 341 pairs, Accuracy: 89.74%, Average Softmax Probability over Sentence Log Probabilities: 0.8911\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '60-69': 100%|██████████| 62/62 [00:12<00:00,  4.95it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '60-69': 248 pairs, Accuracy: 91.53%, Average Softmax Probability over Sentence Log Probabilities: 0.9153\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '70-79': 100%|██████████| 44/44 [00:08<00:00,  4.95it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '70-79': 176 pairs, Accuracy: 95.45%, Average Softmax Probability over Sentence Log Probabilities: 0.9464\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '80-89': 100%|██████████| 29/29 [00:05<00:00,  4.99it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '80-89': 114 pairs, Accuracy: 97.37%, Average Softmax Probability over Sentence Log Probabilities: 0.9615\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '90-99': 100%|██████████| 15/15 [00:02<00:00,  5.01it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '90-99': 59 pairs, Accuracy: 96.61%, Average Softmax Probability over Sentence Log Probabilities: 0.9739\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '100-109': 100%|██████████| 11/11 [00:02<00:00,  5.07it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '100-109': 42 pairs, Accuracy: 95.24%, Average Softmax Probability over Sentence Log Probabilities: 0.9593\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Processing bin '110+': 100%|██████████| 18/18 [00:04<00:00,  4.48it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length bin '110+': 72 pairs, Accuracy: 100.00%, Average Softmax Probability over Sentence Log Probabilities: 0.9925\n",
            "\n",
            "Evaluation Results by New Length Group:\n",
            "'0-9': Accuracy=76.62%, Average Softmax Probability over Sentence Log Probabilities: 0.7489\n",
            "'10-19': Accuracy=81.48%, Average Softmax Probability over Sentence Log Probabilities: 0.8013\n",
            "'20-29': Accuracy=87.98%, Average Softmax Probability over Sentence Log Probabilities: 0.8674\n",
            "'30-39': Accuracy=88.75%, Average Softmax Probability over Sentence Log Probabilities: 0.8733\n",
            "'40-49': Accuracy=91.27%, Average Softmax Probability over Sentence Log Probabilities: 0.9056\n",
            "'50-59': Accuracy=89.74%, Average Softmax Probability over Sentence Log Probabilities: 0.8911\n",
            "'60-69': Accuracy=91.53%, Average Softmax Probability over Sentence Log Probabilities: 0.9153\n",
            "'70-79': Accuracy=95.45%, Average Softmax Probability over Sentence Log Probabilities: 0.9464\n",
            "'80-89': Accuracy=97.37%, Average Softmax Probability over Sentence Log Probabilities: 0.9615\n",
            "'90-99': Accuracy=96.61%, Average Softmax Probability over Sentence Log Probabilities: 0.9739\n",
            "'100-109': Accuracy=95.24%, Average Softmax Probability over Sentence Log Probabilities: 0.9593\n",
            "'110+': Accuracy=100.00%, Average Softmax Probability over Sentence Log Probabilities: 0.9925\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "UERTDMjhKKXc"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZePubbkBKODu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "019a6848",
        "outputId": "a41d7a11-368f-4204-dab7-5972f448a79a"
      },
      "source": [
        "# Ensure the model is in evaluation mode and on the correct device\n",
        "eval_model = best_model\n",
        "eval_model.eval()\n",
        "eval_model.to(device)\n",
        "\n",
        "misclassified_examples = []\n",
        "num_examples_to_show = 10  # You can adjust the number of examples here\n",
        "\n",
        "print(f\"Examples of misclassified sentence pairs (ungrammatical sentence predicted as more probable):\")\n",
        "\n",
        "with torch.no_grad():\n",
        "    # Iterate through the test_dataloader to get batches\n",
        "    for batch in tqdm.tqdm(test_dataloader, desc=\"Finding misclassified examples\"):\n",
        "        correct_input_ids = batch[\"correct_input_ids\"].to(device)\n",
        "        correct_attention_mask = batch[\"correct_attention_mask\"].to(device)\n",
        "        ungrammatical_input_ids = batch[\"ungrammatical_input_ids\"].to(device)\n",
        "        ungrammatical_attention_mask = batch[\"ungrammatical_attention_mask\"].to(device)\n",
        "\n",
        "        # Forward pass for correct and ungrammatical sentences\n",
        "        outputs_correct = eval_model(input_ids=correct_input_ids, attention_mask=correct_attention_mask)\n",
        "        correct_logits = outputs_correct.logits\n",
        "\n",
        "        outputs_ungrammatical = eval_model(input_ids=ungrammatical_input_ids, attention_mask=ungrammatical_attention_mask)\n",
        "        ungrammatical_logits = outputs_ungrammatical.logits\n",
        "\n",
        "        # Calculate sentence log probabilities (same logic as in evaluation cell)\n",
        "        # For correct sentences\n",
        "        shifted_correct_logits = correct_logits[:, :-1, :].contiguous()\n",
        "        correct_target_ids = correct_input_ids[:, 1:]\n",
        "        correct_target_mask = correct_attention_mask[:, 1:]\n",
        "        log_probs_correct_all = torch.log_softmax(shifted_correct_logits, dim=-1)\n",
        "        one_hot_correct_target_ids = F.one_hot(correct_target_ids, num_classes=log_probs_correct_all.size(-1)).float()\n",
        "        selected_log_probs_correct = torch.einsum('bsv,bsv->bs', log_probs_correct_all, one_hot_correct_target_ids)\n",
        "        masked_log_probs_correct = selected_log_probs_correct * correct_target_mask.float()\n",
        "        sentence_log_probs_correct = masked_log_probs_correct.sum(dim=-1)\n",
        "\n",
        "        # For ungrammatical sentences\n",
        "        shifted_ungrammatical_logits = ungrammatical_logits[:, :-1, :].contiguous()\n",
        "        ungrammatical_target_ids = ungrammatical_input_ids[:, 1:]\n",
        "        ungrammatical_target_mask = ungrammatical_attention_mask[:, 1:]\n",
        "        log_probs_ungrammatical_all = torch.log_softmax(shifted_ungrammatical_logits, dim=-1)\n",
        "        one_hot_ungrammatical_target_ids = F.one_hot(ungrammatical_target_ids, num_classes=log_probs_ungrammatical_all.size(-1)).float()\n",
        "        selected_log_probs_ungrammatical = torch.einsum('bsv,bsv->bs', log_probs_ungrammatical_all, one_hot_ungrammatical_target_ids)\n",
        "        masked_log_probs_ungrammatical = selected_log_probs_ungrammatical * ungrammatical_target_mask.float()\n",
        "        sentence_log_probs_ungrammatical = masked_log_probs_ungrammatical.sum(dim=-1)\n",
        "\n",
        "        # Compare log probabilities within each pair and identify misclassified ones\n",
        "        for i in range(sentence_log_probs_correct.shape[0]):\n",
        "            if sentence_log_probs_ungrammatical[i] > sentence_log_probs_correct[i]:\n",
        "                 # Decode the tokenized sentences back to text\n",
        "                 # Need to handle potential padding tokens when decoding\n",
        "                 correct_text = tokenizer.decode(correct_input_ids[i], skip_special_tokens=True)\n",
        "                 ungrammatical_text = tokenizer.decode(ungrammatical_input_ids[i], skip_special_tokens=True)\n",
        "\n",
        "                 misclassified_examples.append({\n",
        "                     \"correct_sentence\": correct_text,\n",
        "                     \"ungrammatical_sentence\": ungrammatical_text,\n",
        "                     \"log_prob_correct\": sentence_log_probs_correct[i].item(),\n",
        "                     \"log_prob_ungrammatical\": sentence_log_probs_ungrammatical[i].item()\n",
        "                 })\n",
        "\n",
        "        # Stop if we have enough examples\n",
        "        if len(misclassified_examples) >= num_examples_to_show:\n",
        "            break\n",
        "\n",
        "# Print the misclassified examples\n",
        "for i, example in enumerate(misclassified_examples[:num_examples_to_show]):\n",
        "    print(f\"\\nExample {i+1}:\")\n",
        "    print(f\"  Correct: {example['correct_sentence']} (Log Prob: {example['log_prob_correct']:.4f})\")\n",
        "    print(f\"  Ungrammatical: {example['ungrammatical_sentence']} (Log Prob: {example['log_prob_ungrammatical']:.4f})\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Examples of misclassified sentence pairs (ungrammatical sentence predicted as more probable):\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Finding misclassified examples:   1%|          | 6/519 [00:02<03:47,  2.25it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Example 1:\n",
            "  Correct: 是在台湾满有名的地方。 (Log Prob: -54.7290)\n",
            "  Ungrammatical: 在台湾满有名的地方。 (Log Prob: -52.9984)\n",
            "\n",
            "Example 2:\n",
            "  Correct: 虽然我住的地方离学校很近，可是对在台北租房子来说非常便宜。每一个月只有六千块。包括水费，电费，网路费，和有线电视费。可以找到这样的房子我非常满意。 (Log Prob: -234.1830)\n",
            "  Ungrammatical: 虽然我住的地方离学校很近，可是房租对台北来说非常便宜。每一个月只有六千块。包括水费，电费，网路费，和有线电视费。可以找到这样的房子我非常得意。 (Log Prob: -226.0752)\n",
            "\n",
            "Example 3:\n",
            "  Correct: 我喜欢跟朋友去看看台北、吃吃中国菜。 (Log Prob: -77.3368)\n",
            "  Ungrammatical: 我喜欢跟朋友去看看台北、吃中国菜。 (Log Prob: -73.0666)\n",
            "\n",
            "Example 4:\n",
            "  Correct: 我对你很有信心，你不是很容易就逃避现实的人。希望你的公司早日恢复，让你回到好的工作职位。 (Log Prob: -146.0331)\n",
            "  Ungrammatical: 我对你很有信心，你不是很容易逃避现实的人。希望你的公司早日恢复，让你回到好的工作。 (Log Prob: -143.6823)\n",
            "\n",
            "Example 5:\n",
            "  Correct: 我们邻居都相信厂长会尽量快点去处理该问题，不过若是厂长反而不聆听我们声音，我们会利用其他的手段来表达我们不满。 (Log Prob: -167.4157)\n",
            "  Ungrammatical: 我们邻居都相信厂长会尽量去处理该问题，不过若是厂长反而不聆听我们声音，我们会利用其他的手段来表达我们不满。 (Log Prob: -151.5133)\n",
            "\n",
            "Example 6:\n",
            "  Correct: 我们可以参观这里的博物馆。 (Log Prob: -36.9201)\n",
            "  Ungrammatical: 我们就可以参观这里的博物馆。 (Log Prob: -36.8967)\n",
            "\n",
            "Example 7:\n",
            "  Correct: 那些国家的治理很暴力，所以非洲人的生活越来越困难。现在，非洲到处贫困的情形很严重。 (Log Prob: -136.0515)\n",
            "  Ungrammatical: 那些国家的控制很暴力，所以非洲人的生活越来越困难。现在，非洲到处贫困很严重。 (Log Prob: -134.0565)\n",
            "\n",
            "Example 8:\n",
            "  Correct: 吸烟的人该知道你们的朋友、同事和家人的健康被你破坏了。 (Log Prob: -103.1054)\n",
            "  Ungrammatical: 吸烟人该知道你们的朋友、同事和家人的健康被你伤害了。 (Log Prob: -101.0720)\n",
            "\n",
            "Example 9:\n",
            "  Correct: 我怕医生，一说有医生来，就怕得要死，医生会打针，我淘气佣人也会告诉我，你不听话会叫医生来打针。 (Log Prob: -231.2543)\n",
            "  Ungrammatical: 我怕医生，一说有医生来，就怕得要死，医生会打针，我淘气也会告诉我，你不听话会叫医生来打针。 (Log Prob: -219.1337)\n",
            "\n",
            "Example 10:\n",
            "  Correct: 工作真的很辛苦。 (Log Prob: -41.6258)\n",
            "  Ungrammatical: 工作很辛苦。 (Log Prob: -39.8790)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "A100",
      "machine_shape": "hm",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  "nbformat_minor": 0
}
